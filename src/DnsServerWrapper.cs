using ARSoft.Tools.Net.Dns;
using System.Net;

namespace PS5_Exploit_Host_Self_Host_Tool;

// For testing:
// Resolve-DnsName -Name "google.com" -Server "127.0.0.1" | Select-Object -ExpandProperty IPAddress
// Resolve-DnsName -Name "playstation.net" -Server "127.0.0.1" | Select-Object -ExpandProperty IPAddress
// Resolve-DnsName -Name "manuals.playstation.net" -Server "127.0.0.1" | Select-Object -ExpandProperty IPAddress
public class DnsServerWrapper
{
	private DnsClient dnsClient;
	private Config config;
	private readonly ILogger<DnsServerWrapper> logger;

	public DnsServerWrapper(Config config, ILogger<DnsServerWrapper> logger)
	{
		this.config = config;
		this.logger = logger;
		if (config.UpstreamDnsIp is null)
		{
			// https://github.com/alexreinert/ARSoft.Tools.Net/blob/aaafdcd61f068318c11734f7b3c59c69371c0549/ARSoft.Tools.Net/Dns/DnsClient.cs#L192
			// use system dns with fallback to google dns
			dnsClient = DnsClient.Default;
			logger.LogInformation("Upstream DNS server not specified, using system DNS with fallback to Google DNS");
		}
		else
		{
			dnsClient = new DnsClient(config.UpstreamDnsIp, 10000); // timeout is in milliseconds, default also 10000
			logger.LogInformation("Upstream DNS server specified: {config.UpstreamDnsIp}", config.UpstreamDnsIp);
		}
	}

	public void ServeForever()
	{
		var dnsServer = new DnsServer(new UdpServerTransport(config.ServersBindIP, 5000));
		dnsServer.QueryReceived += async (sender, e) =>
		{
			if (e.Query is not DnsMessage message)
			{
				logger.LogWarning("Received non-DNS query, ignoring");
				return;
			}

			DnsMessage response = message.CreateResponseInstance();

			if (message.Questions.Count == 0 || message.Questions.Count > 1)
			{
				response.ReturnCode = ReturnCode.Refused;
				e.Response = response;
				logger.LogInformation("Refused DNS request because it had zero or more than one question");
				return;
			}

			string fullyQualifiedDomainName = message.Questions[0].Name.ToString().TrimEnd('.');

			if (fullyQualifiedDomainName.Contains("manuals.playstation", StringComparison.InvariantCultureIgnoreCase) &&
				config.UserGuideRedirect)
			{

				// set response to host ip
				response.ReturnCode = ReturnCode.NoError;
				response.AnswerRecords.Add(new ARecord(message.Questions[0].Name, 5, config.TargetIP));
				e.Response = response;
				logger.LogInformation("Responded to User Guide DNS request to '{fullyQualifiedDomainName}' with host IP: {config.TargetIP}", fullyQualifiedDomainName, config.TargetIP);
				return;
			}

			if (fullyQualifiedDomainName.Contains("playstation", StringComparison.InvariantCultureIgnoreCase) &&
				!fullyQualifiedDomainName.Contains("manuals.playstation", StringComparison.InvariantCultureIgnoreCase))
			{
				response.ReturnCode = ReturnCode.Refused;
				e.Response = response;
				logger.LogTrace("Blocked DNS request to: {fullyQualifiedDomainName}", fullyQualifiedDomainName);
				return;
			}

			// first check EnableDnsForwarding is true, if so dont bother checking whitelist
			bool isWhitelisted = !config.EnableDnsForwarding && config.DnsServerResolveWhitelist is not null && config.DnsServerResolveWhitelist.Any(x => x.Equals(fullyQualifiedDomainName, StringComparison.InvariantCultureIgnoreCase));
			if (!config.EnableDnsForwarding && !isWhitelisted && !config.UserGuideRedirect)
			{
				response.ReturnCode = ReturnCode.Refused;
				e.Response = response;
				logger.LogInformation("Refused DNS request to '{fullyQualifiedDomainName}' because DNS forwarding is disabled and it's not in the whitelist", fullyQualifiedDomainName);
				return;
			}

			// send query to upstream server
			DnsQuestion question = message.Questions[0];
			DnsMessage? upstreamResponse = await dnsClient.ResolveAsync(question.Name, question.RecordType, question.RecordClass);

			// if got an answer, copy it to the message sent to the client
			if (upstreamResponse != null)
			{
				foreach (DnsRecordBase record in upstreamResponse.AnswerRecords)
				{
					response.AnswerRecords.Add(record);
				}
				foreach (DnsRecordBase record in upstreamResponse.AdditionalRecords)
				{
					response.AdditionalRecords.Add(record);
				}

				response.ReturnCode = ReturnCode.NoError;

				e.Response = response;
			}

			logger.LogInformation($"Forwarded DNS request to '{fullyQualifiedDomainName}' to upstream DNS server {(isWhitelisted ? "(because its whitelisted)" : "")}");

		};
		dnsServer.Start();
		logger.LogInformation("DNS server started");
	}

}

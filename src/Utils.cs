using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;

namespace PS5_Exploit_Host_Self_Host_Tool;

public static partial class Utils
{
	public static string GeneratePassword(int length)
	{
		if (length < 4)
		{
			throw new ArgumentOutOfRangeException(nameof(length), "Password length must be at least 4 characters.");
		}

		const string lowercase = "abcdefghijklmnopqrstuvwxyz";
		const string uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		const string digits = "0123456789";
		const string special = "!@#$%&*";

		return string.Create(length, (lowercase, uppercase, digits, special), (span, state) =>
		{
			var random = Random.Shared;

			// first fill with lowercase
			for (int i = 0; i < length; i++)
			{
				span[i] = state.lowercase[random.Next(state.lowercase.Length)];
			}

			int maxPerType = length / 4;

			List<int> availableIndexes = Enumerable.Range(0, length).ToList();

			// add at least one uppercase, digit, and special character
			// random.next is non-inclusive on the max value
			int uppercaseCount = random.Next(1, maxPerType + 1);
			for (int i = 0; i < uppercaseCount; i++)
			{
				int index = random.Next(0, availableIndexes.Count);
				span[availableIndexes[index]] = state.uppercase[random.Next(state.uppercase.Length)];
				availableIndexes.RemoveAt(index);
			}

			int digitCount = random.Next(1, maxPerType + 1);
			for (int i = 0; i < digitCount; i++)
			{
				int index = random.Next(0, availableIndexes.Count);
				span[availableIndexes[index]] = state.digits[random.Next(state.digits.Length)];
				availableIndexes.RemoveAt(index);
			}

			int specialCount = random.Next(1, maxPerType + 1);
			for (int i = 0; i < specialCount; i++)
			{
				int index = random.Next(0, availableIndexes.Count);
				span[availableIndexes[index]] = state.special[random.Next(state.special.Length)];
				availableIndexes.RemoveAt(index);
			}
		});
	}

	internal static void NotifySystemdReadyIfNeeded(ILogger logger)
	{
		if (Environment.OSVersion.Platform != PlatformID.Unix)
		{ 
			logger.LogTrace("Not running on Unix, not notifying systemd");
			return; 
		}

		string? notifySocket = Environment.GetEnvironmentVariable("NOTIFY_SOCKET");

		if (string.IsNullOrEmpty(notifySocket))
		{
			// not running under systemd
			logger.LogTrace("NOTIFY_SOCKET not set, not notifying systemd");
			return;
		}
		
		try
		{
			using var socket = new Socket(AddressFamily.Unix, SocketType.Dgram, ProtocolType.Unspecified);

			var endPoint = new UnixDomainSocketEndPoint(notifySocket);
			socket.Connect(endPoint);

			var message = Encoding.UTF8.GetBytes("READY=1");
			socket.Send(message);
			logger.LogTrace("Notified systemd that the service is ready");
		}
		catch (Exception ex)
		{
			throw new Exception("Failed to notify systemd", ex);
		}
	}

	private static readonly string[] appcacheSupportedExtensions =
	[
		".html", ".css", ".js", ".png", ".jpg", ".jpeg", ".webp", ".gif", ".svg", ".woff", ".woff2", ".ttf", ".eot", ".otf", ".ico", ".json", ".bin", ".elf", ".mp4"
	];

	internal static string GenerateAppcacheManifestForFolder(string folderPath)
	{
		var sb = new StringBuilder();
		sb.AppendLine("CACHE MANIFEST");
		sb.AppendLine("# Auto-generated");

		folderPath = Path.GetFullPath(folderPath).Replace('\\', '/');

		// Get all files recursively, exclude files and folders that start with a dot
		var files = Directory.EnumerateFiles(folderPath, "*", SearchOption.AllDirectories)
			.Select(f => f.Replace('\\', '/'))
			.Where(f => !f.Contains("/."));

		// The way appcaches work is that if anything in the manifest changes, the browser will re-download everything
		// since most of the time the files and names wont change only their contents, we mainly rely on this comment to refresh the cache
		var lastModified = files.Max(File.GetLastWriteTimeUtc);
		sb.AppendLine($"# Last modified cached file: {lastModified:yyyy-MM-ddTHH:mm:ssZ}");
		sb.AppendLine();

		foreach (var file in files)
		{
			var extension = Path.GetExtension(file).ToLowerInvariant();
			if (!appcacheSupportedExtensions.Contains(extension))
			{ continue; }

			string relativePath = file.Substring(folderPath.Length).TrimStart('/');
			string relativePathUrlEncoded = string.Join("/", relativePath.Split('/').Select(Uri.EscapeDataString));

			sb.AppendLine(relativePathUrlEncoded);
		}


		sb.AppendLine();
		sb.AppendLine("NETWORK:");
		sb.AppendLine("*");

		return sb.ToString();
	}



	[GeneratedRegex(@"^document/[^/]+/ps5")]
	public static partial Regex UserGuidePathRegex();

}
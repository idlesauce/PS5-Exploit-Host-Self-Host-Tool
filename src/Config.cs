using System.Net;

namespace PS5_Exploit_Host_Self_Host_Tool;

[IniHeader(Header = "PS5 Exploit Host Self-Host Tool")]
public class Config
{
	// Get the first non-loopback IPv4 address of the local machine
	[IniProperty(Comment = """
	IP to bind the HTTP and DNS server to, this should be the IP of the interface on the same network as the PS5, or 0.0.0.0 to bind/serve on all interfaces
	[!] If you're using the wifi access point feature, you'll need to change this from the default value
	""")]
	public IPAddress ServersBindIP { get; set; } = Dns.GetHostEntry(Dns.GetHostName()).AddressList.FirstOrDefault(x => x.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork && !IPAddress.IsLoopback(x)) ?? throw new Exception("Failed to find a valid IP address");

	[IniProperty(Comment = """
	IP to respond with when a DNS query for manuals.playstation.net is received, must be the IP of the interface on the same network as the PS5
	[!] If you're using the wifi access point feature, you'll need to change this from the default value
	""")]
	public IPAddress TargetIP { get; set; } = Dns.GetHostEntry(Dns.GetHostName()).AddressList.FirstOrDefault(x => x.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork && !IPAddress.IsLoopback(x)) ?? throw new Exception("Failed to find a valid IP address");

	[IniProperty(Comment = "IP of the upstream DNS server to use, leave blank to use the system DNS server (with fallback to Google DNS)")]
	public IPAddress? UpstreamDnsIp { get; set; } = null;

	[IniProperty(Comment = "Enable DNS server")]
	public bool EnableDnsServer { get; set; } = true;

	[IniProperty(Comment = "Disable to serve the real manuals.playstation.net which has a trusted certificate, which will clear the old appcache")]
	public bool UserGuideRedirect { get; set; } = true;

	[IniProperty(Comment = "[Windows & Linux only] Kill processes using the DNS port (53) before starting the DNS server, requires admin/root privileges")]
	public bool KillProcessessUsingDnsPort { get; set; } = true;

	[IniProperty(Comment = "[Windows only] KillProcessessUsingDnsPort has an exception for svchost since it provides DHCP for the wifi access point, and killing it is not necessary unless you're binding to 0.0.0.0, set this to true to kill svchost")]
	public bool KillSvchost { get; set; } = false;

	[IniProperty(Comment = "Enable DNS forwarding, if disabled the DNS server will only respond to queries for manuals.playstation.net (User Guide)")]
	public bool EnableDnsForwarding { get; set; } = true;

	[IniProperty(Comment = "DNS server domain whitelist, comma separated, if a domain is in this list the DNS server will resolve it with the upstream DNS server even if DNS forwarding is disabled")]
	public List<string>? DnsServerResolveWhitelist { get; set; } = null;

	[IniProperty(Comment = "Port used for the HTTP server, leave blank to disable the HTTP server")]
	public int? HttpPort { get; set; } = 20000;

	[IniProperty(Comment = "Port used for the HTTPS server, must be 443 for the user guide to work, leave blank to disable the HTTPS server")]
	public int? HttpsPort { get; set; } = 443;

	[IniProperty(Comment = "Enable auto updates of the host files from github")]
	public bool EnableHostFilesAutoUpdater { get; set; } = true;

	private string _hostFilesAutoUpdaterSource = "appcache";
	[IniProperty(Comment = "'appcache' or 'no-appcache' for PS5-Exploit-Host. Alternatively, set any .zip direct link (must have an ETag header) or set to any github repo url, optionally including a folder in the repo, to use/update host files from a custom source")]
	public string HostFilesAutoUpdaterSource
	{
		get => _hostFilesAutoUpdaterSource;
		set
		{
			if (value != "appcache" && value != "no-appcache" && !Uri.TryCreate(value, UriKind.Absolute, out var parsedUrl))
			{
				// we only accept github urls like this:
				// - any link ending in .zip
				// - https://github.com/idlesauce/PS5-Exploit-Host
				// - https://github.com/idlesauce/PS5-Exploit-Host/tree/dev
				// - https://github.com/idlesauce/PS5-Exploit-Host/tree/main/document/en/ps5

				if (parsedUrl is null || (parsedUrl.Host != "github.com" && !parsedUrl.AbsolutePath.EndsWith(".zip")))
				{
					throw new ArgumentException("Invalid HostFilesAutoUpdaterSource, must be 'appcache', 'no-appcache' or a .zip download link or github repo url", nameof(HostFilesAutoUpdaterSource));
				}
			}
			_hostFilesAutoUpdaterSource = value;
		}
	}

	private int _hostFilesAutoUpdaterCheckIntervalMinutes = 60;
	[IniProperty(Comment = "Interval in minutes to check github for updates to host files")]
	public int HostFilesAutoUpdaterCheckIntervalMinutes
	{
		get => _hostFilesAutoUpdaterCheckIntervalMinutes;
		set
		{
			if (value < 1)
			{
				throw new ArgumentException("HostFilesAutoUpdaterCheckIntervalMinutes must be greater than 0", nameof(HostFilesAutoUpdaterCheckIntervalMinutes));
			}
			_hostFilesAutoUpdaterCheckIntervalMinutes = value;
		}
	}

	[IniProperty(Comment = "The appcache will fail to update after a reboot because of the untrusted certificate, this will block the appcache requests on HTTPS")]
	public bool BlockAppCacheRequestsOnHttps { get; set; } = true;
	
	[IniProperty(Comment = "Dynamically generate the appcache file based on the files in the wwwroot folder and their modification times, you'll need to have the manifest file specified in the html for this to work")]
	public bool DynamicallyGenerateAppcache { get; set; } = false;


	[IniProperty(Comment = "[Windows & Linux only] Create a WiFi access point")]
	public bool EnableWifiAP { get; set; } = false;

	[IniProperty(Comment = "[Windows & Linux only] SSID of the WiFi access point")]
	public string WifiAPSSID { get; set; } = "ps5host";

	[IniProperty(Comment = "[Windows & Linux only] Password of the WiFi access point")]
	public string WifiAPPassword { get; set; } = Utils.GeneratePassword(12);

	[IniProperty(Comment = "[Linux only] wlan interface name used to create the wifi access point")]
	public string WifiAPWifiInterface { get; set; } = "wlan0";

	private IPAddress _wifiAPAssignIp = IPAddress.Parse("192.168.137.1");

	[IniProperty(Comment = "[Linux only] IP for this machine on the wifi access point, must end in .1, .2 to .200 is used for DHCP (windows always uses 192.168.137.x)")]
	public IPAddress WifiAPAssignIp
	{
		get => _wifiAPAssignIp;
		set
		{
			if (value.GetAddressBytes()[3] != 1)
			{
				throw new ArgumentException("Invalid IP address format, it must end with .1", nameof(WifiAPAssignIp));
			}
			_wifiAPAssignIp = value;
		}
	}

	[IniProperty(Comment = "[Linux only] Enable internet access on the wifi access point")]
	public bool EnableWifiAPInternetAccess { get; set; } = false;

	[IniProperty(Comment = "[Linux only] Interface with internet access used for the wifi access point if EnableWifiAPInternetAccess is true")]
	public string WifiAPInternetAccessInterface { get; set; } = "wlan0";

	[IniProperty(Comment = "[Linux only] Hijack and redirect dns on the wifi access point to the local server, so if a device sends a request to another dns server it will be redirected to the local server")]
	public bool EnableWifiAPDnsHijacking { get; set; } = false;

	public bool EnableVerboseLogging { get; set; } = false;


	internal string WifiAPVirtualInterface => WifiAPWifiInterface + "_ps5host";
	
	internal static string AppDataPath { get; } = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".ps5-exploit-host");

	// Make wwwroot path the same as the exe path if theres an index.html there
	internal static string WWWRootPath { get; } = File.Exists(Path.Combine(System.AppContext.BaseDirectory, "index.html")) ? System.AppContext.BaseDirectory : Path.Combine(AppDataPath, "wwwroot");
	
	internal static string NonUserEditableFilesPath { get; } = Path.Combine(AppDataPath, ".internal");

	// If theres a config next to the exe use that
	internal static string ConfigFilePath { get; } = File.Exists(Path.Combine(System.AppContext.BaseDirectory, "config.ini")) ? Path.Combine(System.AppContext.BaseDirectory, "config.ini") : Path.Combine(AppDataPath, "config.ini");

}
